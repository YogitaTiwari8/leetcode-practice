/*
 * LeetCode: 17
 * Problem Name: Letter Combinations of a Phone Number
 * Link: https://leetcode.com/problems/letter-combinations-of-a-phone-number/
 * 
 * Approach:
 * - Use recursion to explore all combinations.
 * - Map each digit to its corresponding letters using a `keys` array.
 * - For each character in the current digit's mapping, recursively generate combinations for the remaining digits.
 * - Base case: when the input becomes empty, return a list with an empty string to allow concatenation.
 * - Combine each letter with the result of the recursive call to form the full combinations.
 */

Solution 
--
class Solution {
    // Mapping digits to corresponding letters on a phone keypad
    String[] keys = {
        "",     // 0
        "",     // 1
        "abc",  // 2
        "def",  // 3
        "ghi",  // 4
        "jkl",  // 5
        "mno",  // 6
        "pqrs", // 7
        "tuv",  // 8
        "wxyz"  // 9
    };

    public List<String> letterCombinations(String digits) {
        if (digits.length() == 0) {
            return new ArrayList<String>(); // Edge case: no input
        } else {
            return helper(digits);
        }
    }

    // Recursive helper to build combinations
    public List<String> helper(String digits) {
        if (digits.length() == 0) {
            List<String> list = new ArrayList<>();
            list.add(""); // Base case: return list with empty string
            return list;
        }

        ArrayList<String> newList = new ArrayList<>();
        char c = digits.charAt(0);
        int index = c - '0';
        String word = keys[index]; // Get mapped characters for current digit

        // Recursively get combinations for the remaining digits
        List<String> oldList = helper(digits.substring(1));
        for (int i = 0; i < word.length(); i++) {
            for (int j = 0; j < oldList.size(); j++) {
                // Combine current character with all combinations from the rest
                newList.add(word.charAt(i) + oldList.get(j));
            }
        }
        return newList;
    }
}
--
